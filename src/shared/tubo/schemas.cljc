(ns tubo.schemas)

(def ValidUsername
  [:and
   [:string {:min 3 :max 22}]
   [:re
    {:error/message
     "should be alphanumeric or contain the characters '.', '_', '-'"}
    #"^[a-zA-Z0-9._-]+$"]])

(def ValidPassword
  [:and
   [:string {:min 8 :max 32}]
   [:re {:error/message "should contain one number"} #"[0-9]+"]
   [:re {:error/message "should contain one upper case letter"} #"[A-Z]+"]
   [:re {:error/message "should contain one lower case letter"} #"[a-z]+"]
   [:re {:error/message "should contain one special character"} #"[^\w\s]+"]])

(def Image
  [:map
   [:estimatedResolutionLevel [:enum "LOW" "MEDIUM" "HIGH"]]
   [:height int?]
   [:url uri?]
   [:width int?]])

(def StreamItem
  [:map
   [:type "stream"]
   [:service-id int?]
   [:url uri?]
   [:name string?]
   [:thumbnails [:vector Image]]
   [:uploader-name string?]
   [:uploader-url uri?]
   [:uploader-avatars [:vector Image]]
   [:upload-date string?]
   [:short-description string?]
   [:duration number?]
   [:view-count int?]
   [:uploaded number?]
   [:uploader-verified? boolean]])

(def ChannelItem
  [:map
   [:type "channel"]
   [:service-id int?]
   [:url uri?]
   [:name string?]
   [:thumbnails [:vector Image]]
   [:description string?]
   [:subscriber-count int?]
   [:stream-count int?]
   [:verified? boolean]])

(def PlaylistItem
  [:map
   [:type "playlist"]
   [:service-id int?]
   [:url uri?]
   [:name string?]
   [:thumbnails [:vector Image]]
   [:uploader-name string?]
   [:stream-count int?]])

(def ItagItem
  [:map
   [:approxDurationMs number?]
   [:audioTrackId [:maybe int?]]
   [:audioTrackType string?]
   [:resolutionString string?]
   [:sampleRate int?]
   [:width number?]
   [:indexStart number?]
   [:targetDurationSec number?]
   [:audioChannels number?]
   [:indexEnd number?]
   [:fps number?]
   [:codec string?]
   [:initEnd number?]
   [:bitrate number?]
   [:quality string?]
   [:contentLength number?]
   [:audioLocale string?]
   [:mediaFormat string?]
   [:initStart number?]
   [:averageBitrate number?]
   [:height number?]
   [:audioTrackName string?]])

(def Stream
  [:map
   [:format string?]
   [:audioTrackId [:maybe int?]]
   [:content uri?]
   [:audioTrackType [:maybe string?]]
   [:indexStart number?]
   [:indexEnd number?]
   [:formatId int?]
   [:deliveryMethod string?]
   [:codec string?]
   [:manifestUrl [:maybe uri?]]
   [:id string?]
   [:url boolean?]
   [:itag int?]
   [:initStart number?]
   [:initEnd number?]
   [:bitrate number?]
   [:quality string?]
   [:audioLocale string?]
   [:itagItem [:maybe ItagItem]]
   [:averageBitrate number?]
   [:audioTrackName string?]])

(def StreamSegment
  [:map
   [:channelName string?]
   [:previewUrl uri?]
   [:startTimeSeconds number?]
   [:title string?]
   [:url uri?]])

(def PreviewFrame
  [:map
   [:durationPerFrame number?]
   [:frameHeight number?]
   [:frameWidth number?]
   [:framesPerPageX number?]
   [:framesPerPageY number?]
   [:totalCount number?]
   [:urls [:vector uri?]]])

(def Locale
  [:map
   [:displayLanguage string?]
   [:displayVariant string?]
   [:variant string?]
   [:script string?]
   [:displayName string?]
   [:unicodeLocaleAttributes [:vector string?]]
   [:displayScript string?]
   [:displayCountry string?]
   [:language string?]
   [:unicodeLocaleKeys [:vector string?]]
   [:country string?]
   [:ISO3Country string?]
   [:ISO3Language string?]
   [:extensionKeys [:vector string?]]])

(def Subtitle
  [:map
   [:format string?]
   [:locale Locale]
   [:content uri?]
   [:formatId int?]
   [:autoGenerated boolean?]
   [:deliveryMethod string?]
   [:extension string?]
   [:manifestUrl uri?]
   [:id string?]
   [:displayLanguageName string?]
   [:url boolean]
   [:itagItem ItagItem]
   [:languageTag string?]])

(def InfoStream
  [:map
   [:name string?]
   [:service-id int?]
   [:related-streams [:vector [:enum ChannelItem StreamItem]]]
   [:url uri?]
   [:thumbnails [:vector Image]]
   [:description string?]
   [:duration number?]
   [:upload-date string?]
   [:uploader-url uri?]
   [:uploader-avatars [:vector Image]]
   [:uploader-verified? boolean?]
   [:tags [:vector string?]]
   [:category string?]
   [:view-count int?]
   [:like-count int?]
   [:dislike-count [:maybe int?]]
   [:subscriber-count int?]
   [:audio-streams [:vector Stream]]
   [:video-streams [:vector Stream]]
   [:video-only-streams [:vector Stream]]
   [:hls-url uri?]
   [:dash-mpd-url uri?]
   [:preview-frames [:vector PreviewFrame]]
   [:stream-segments [:vector StreamSegment]]
   [:support-info string?]
   [:short? boolean]
   [:license string?]
   [:subtitles [:vector Subtitle]]])

(def UserPlaylistStream
  [:map
   [:id {:optional true} [:maybe int?]]
   [:name string?]
   [:duration int?]
   [:uploader-avatar [:maybe uri?]]
   [:thumbnail [:maybe uri?]]
   [:uploader-url uri?]
   [:uploader-verified? boolean?]
   [:uploader-name string?]
   [:url uri?]])

(def UserPlaylist
  [:or
   [:map
    [:id {:optional true} int?]
    [:playlist-id {:optional true} uuid?]
    [:name string?]
    [:thumbnail [:maybe uri?]]
    [:owner {:optional true} int?]
    [:items {:optional true} [:vector UserPlaylistStream]]]
   [:map
    [:items [:vector UserPlaylistStream]]]])

(def PeerTubeInstance
  [:map
   [:name string?]
   [:url uri?]])

(def PlaylistsConfigFile
  [:map
   [:format
    [:fn {:error/fn "Format is not supported"} (fn [format] (= format "Tubo"))]]
   [:version int?]
   [:playlists
    [:vector
     [:map
      [:name string?]
      [:thumbnail {:optional true} [:maybe uri?]]
      [:items [:vector string?]]]]]])
